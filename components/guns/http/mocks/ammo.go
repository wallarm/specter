// Code generated by mockery v2.20.2. DO NOT EDIT.

package ammomock

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
	netsample "github.com/wallarm/specter/core/aggregator/netsample"
)

// Ammo is an autogenerated mock type for the Ammo type
type Ammo struct {
	mock.Mock
}

// ID provides a mock function with given fields:
func (_m *Ammo) ID() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// IsInvalid provides a mock function with given fields:
func (_m *Ammo) IsInvalid() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Request provides a mock function with given fields:
func (_m *Ammo) Request() (*http.Request, *netsample.Sample) {
	ret := _m.Called()

	var r0 *http.Request
	var r1 *netsample.Sample
	if rf, ok := ret.Get(0).(func() (*http.Request, *netsample.Sample)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *http.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Request)
		}
	}

	if rf, ok := ret.Get(1).(func() *netsample.Sample); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*netsample.Sample)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewAmmo interface {
	mock.TestingT
	Cleanup(func())
}

// NewAmmo creates a new instance of Ammo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAmmo(t mockConstructorTestingTNewAmmo) *Ammo {
	mock := &Ammo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
