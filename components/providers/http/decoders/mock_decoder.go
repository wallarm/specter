// Code generated by mockery v2.22.1. DO NOT EDIT.

package decoders

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	core "github.com/wallarm/specter/core"
)

// MockDecoder is an autogenerated mock type for the Decoder type
type MockDecoder struct {
	mock.Mock
}

// LoadAmmo provides a mock function with given fields: _a0
func (_m *MockDecoder) LoadAmmo(_a0 context.Context) ([]DecodedAmmo, error) {
	ret := _m.Called(_a0)

	var r0 []DecodedAmmo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]DecodedAmmo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []DecodedAmmo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DecodedAmmo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Release provides a mock function with given fields: a
func (_m *MockDecoder) Release(a core.Ammo) {
	_m.Called(a)
}

// Scan provides a mock function with given fields: _a0
func (_m *MockDecoder) Scan(_a0 context.Context) (DecodedAmmo, error) {
	ret := _m.Called(_a0)

	var r0 DecodedAmmo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (DecodedAmmo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) DecodedAmmo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(DecodedAmmo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockDecoder interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockDecoder creates a new instance of MockDecoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockDecoder(t mockConstructorTestingTNewMockDecoder) *MockDecoder {
	mock := &MockDecoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
