// Code generated by mockery v2.20.2. DO NOT EDIT.

package aggregatemock

import (
	mock "github.com/stretchr/testify/mock"
	core "github.com/wallarm/specter/core"
)

// SampleEncoder is an autogenerated mock type for the SampleEncoder type
type SampleEncoder struct {
	mock.Mock
}

// Encode provides a mock function with given fields: s
func (_m *SampleEncoder) Encode(s core.Sample) error {
	ret := _m.Called(s)

	var r0 error
	if rf, ok := ret.Get(0).(func(core.Sample) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Flush provides a mock function with given fields:
func (_m *SampleEncoder) Flush() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSampleEncoder interface {
	mock.TestingT
	Cleanup(func())
}

// NewSampleEncoder creates a new instance of SampleEncoder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSampleEncoder(t mockConstructorTestingTNewSampleEncoder) *SampleEncoder {
	mock := &SampleEncoder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
