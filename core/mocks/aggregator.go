// Code generated by mockery v2.20.2. DO NOT EDIT.

package coremock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	core "github.com/wallarm/specter/core"
)

// Aggregator is an autogenerated mock type for the Aggregator type
type Aggregator struct {
	mock.Mock
}

// Report provides a mock function with given fields: s
func (_m *Aggregator) Report(s core.Sample) {
	_m.Called(s)
}

// Run provides a mock function with given fields: ctx, deps
func (_m *Aggregator) Run(ctx context.Context, deps core.AggregatorDeps) error {
	ret := _m.Called(ctx, deps)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, core.AggregatorDeps) error); ok {
		r0 = rf(ctx, deps)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewAggregator interface {
	mock.TestingT
	Cleanup(func())
}

// NewAggregator creates a new instance of Aggregator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAggregator(t mockConstructorTestingTNewAggregator) *Aggregator {
	mock := &Aggregator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
